export interface TreeFilterProps {
    requestApi?: (data?: any) => Promise<any>;
    data?: {
        [key: string]: any;
    }[];
    title?: string;
    id?: string;
    label?: string;
    multiple?: boolean;
    defaultValue?: any;
}
declare function __VLS_template(): {
    slots: {
        default?(_: {
            row: any;
        }): any;
    };
    refs: {
        treeRef: import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
            data: {
                type: ArrayConstructor;
                default: () => never[];
            };
            emptyText: {
                type: StringConstructor;
            };
            renderAfterExpand: {
                type: BooleanConstructor;
                default: boolean;
            };
            nodeKey: StringConstructor;
            checkStrictly: BooleanConstructor;
            defaultExpandAll: BooleanConstructor;
            expandOnClickNode: {
                type: BooleanConstructor;
                default: boolean;
            };
            checkOnClickNode: BooleanConstructor;
            checkDescendants: {
                type: BooleanConstructor;
                default: boolean;
            };
            autoExpandParent: {
                type: BooleanConstructor;
                default: boolean;
            };
            defaultCheckedKeys: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["defaultCheckedKeys"]>;
            defaultExpandedKeys: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["defaultExpandedKeys"]>;
            currentNodeKey: import('vue').PropType<string | number>;
            renderContent: FunctionConstructor;
            showCheckbox: {
                type: BooleanConstructor;
                default: boolean;
            };
            draggable: {
                type: BooleanConstructor;
                default: boolean;
            };
            allowDrag: FunctionConstructor;
            allowDrop: FunctionConstructor;
            props: {
                type: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["props"]>;
                default: () => {
                    children: string;
                    label: string;
                    disabled: string;
                };
            };
            lazy: {
                type: BooleanConstructor;
                default: boolean;
            };
            highlightCurrent: BooleanConstructor;
            load: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["load"]>;
            filterNodeMethod: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["filterNodeMethod"]>;
            accordion: BooleanConstructor;
            indent: {
                type: NumberConstructor;
                default: number;
            };
            icon: {
                type: import('vue').PropType<string | import('vue').Component>;
            };
        }>> & {
            "onCurrent-change"?: ((...args: any[]) => any) | undefined;
            "onNode-expand"?: ((...args: any[]) => any) | undefined;
            onCheck?: ((...args: any[]) => any) | undefined;
            "onCheck-change"?: ((...args: any[]) => any) | undefined;
            "onNode-click"?: ((...args: any[]) => any) | undefined;
            "onNode-contextmenu"?: ((...args: any[]) => any) | undefined;
            "onNode-collapse"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-start"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-end"?: ((...args: any[]) => any) | undefined;
            "onNode-drop"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-leave"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-enter"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-over"?: ((...args: any[]) => any) | undefined;
        }, {
            ns: {
                namespace: import('vue').ComputedRef<string>;
                b: (blockSuffix?: string) => string;
                e: (element?: string) => string;
                m: (modifier?: string) => string;
                be: (blockSuffix?: string, element?: string) => string;
                em: (element?: string, modifier?: string) => string;
                bm: (blockSuffix?: string, modifier?: string) => string;
                bem: (blockSuffix?: string, element?: string, modifier?: string) => string;
                is: {
                    (name: string, state: boolean | undefined): string;
                    (name: string): string;
                };
                cssVar: (object: Record<string, string>) => Record<string, string>;
                cssVarName: (name: string) => string;
                cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                cssVarBlockName: (name: string) => string;
            };
            store: import('vue').Ref<{
                currentNode: {
                    id: number;
                    text: string;
                    checked: boolean;
                    indeterminate: boolean;
                    data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
                    expanded: boolean;
                    parent: any;
                    visible: boolean;
                    isCurrent: boolean;
                    store: any;
                    isLeafByUser: boolean;
                    isLeaf: boolean;
                    canFocus: boolean;
                    level: number;
                    loaded: boolean;
                    childNodes: any[];
                    loading: boolean;
                    initialize: () => void;
                    setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                    readonly label: string;
                    readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
                    readonly disabled: boolean;
                    readonly nextSibling: any | null;
                    readonly previousSibling: any | null;
                    contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
                    remove: () => void;
                    insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
                    insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                    insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                    removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
                    removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                    expand: (callback?: () => void, expandParent?: boolean) => void;
                    doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                    collapse: () => void;
                    shouldLoadData: () => boolean;
                    updateLeafState: () => void;
                    setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                    getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
                    updateChildren: () => void;
                    loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                    eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
                    reInitChecked: () => void;
                };
                currentNodeKey: import('element-plus/es/components/tree/src/tree.type').TreeKey;
                nodesMap: import('element-plus/es/components/tree/src/tree.type').TreeStoreNodesMap;
                root: {
                    id: number;
                    text: string;
                    checked: boolean;
                    indeterminate: boolean;
                    data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
                    expanded: boolean;
                    parent: any;
                    visible: boolean;
                    isCurrent: boolean;
                    store: any;
                    isLeafByUser: boolean;
                    isLeaf: boolean;
                    canFocus: boolean;
                    level: number;
                    loaded: boolean;
                    childNodes: any[];
                    loading: boolean;
                    initialize: () => void;
                    setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                    readonly label: string;
                    readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
                    readonly disabled: boolean;
                    readonly nextSibling: any | null;
                    readonly previousSibling: any | null;
                    contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
                    remove: () => void;
                    insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
                    insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                    insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                    removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
                    removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                    expand: (callback?: () => void, expandParent?: boolean) => void;
                    doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                    collapse: () => void;
                    shouldLoadData: () => boolean;
                    updateLeafState: () => void;
                    setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                    getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
                    updateChildren: () => void;
                    loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                    eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
                    reInitChecked: () => void;
                };
                data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
                lazy: boolean;
                load: import('element-plus/es/components/tree/src/tree.type').LoadFunction;
                filterNodeMethod: import('element-plus/es/components/tree/src/tree.type').FilterNodeMethodFunction;
                key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
                defaultCheckedKeys: import('element-plus/es/components/tree/src/tree.type').TreeKey[];
                checkStrictly: boolean;
                defaultExpandedKeys: import('element-plus/es/components/tree/src/tree.type').TreeKey[];
                autoExpandParent: boolean;
                defaultExpandAll: boolean;
                checkDescendants: boolean;
                props: {
                    children?: string | undefined;
                    label?: (string | ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => string)) | undefined;
                    disabled?: (string | ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => boolean)) | undefined;
                    isLeaf?: (string | ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => boolean)) | undefined;
                    class?: ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => string | {
                        [key: string]: boolean;
                    }) | undefined;
                };
                initialize: () => void;
                filter: (value: import('element-plus/es/components/tree/src/tree.type').FilterValue) => void;
                setData: (newVal: import('element-plus/es/components/tree/src/tree.type').TreeData) => void;
                getNode: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => import('element-plus/es/components/tree/src/model/node').default;
                insertBefore: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refData: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
                insertAfter: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refData: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
                remove: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
                append: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, parentData: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/model/node').default) => void;
                _initDefaultCheckedNodes: () => void;
                _initDefaultCheckedNode: (node: import('element-plus/es/components/tree/src/model/node').default) => void;
                setDefaultCheckedKey: (newVal: import('element-plus/es/components/tree/src/tree.type').TreeKey[]) => void;
                registerNode: (node: import('element-plus/es/components/tree/src/model/node').default) => void;
                deregisterNode: (node: import('element-plus/es/components/tree/src/model/node').default) => void;
                getCheckedNodes: (leafOnly?: boolean, includeHalfChecked?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
                getCheckedKeys: (leafOnly?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
                getHalfCheckedNodes: () => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
                getHalfCheckedKeys: () => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
                _getAllNodes: () => import('element-plus/es/components/tree/src/model/node').default[];
                updateChildren: (key: import('element-plus/es/components/tree/src/tree.type').TreeKey, data: import('element-plus/es/components/tree/src/tree.type').TreeData) => void;
                _setCheckedKeys: (key: import('element-plus/es/components/tree/src/tree.type').TreeKey, leafOnly: boolean | undefined, checkedKeys: {
                    [key: string]: boolean;
                }) => void;
                setCheckedNodes: (array: import('element-plus/es/components/tree/src/model/node').default[], leafOnly?: boolean) => void;
                setCheckedKeys: (keys: import('element-plus/es/components/tree/src/tree.type').TreeKey[], leafOnly?: boolean) => void;
                setDefaultExpandedKeys: (keys: import('element-plus/es/components/tree/src/tree.type').TreeKey[]) => void;
                setChecked: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData, checked: boolean, deep: boolean) => void;
                getCurrentNode: () => import('element-plus/es/components/tree/src/model/node').default;
                setCurrentNode: (currentNode: import('element-plus/es/components/tree/src/model/node').default) => void;
                setUserCurrentNode: (node: import('element-plus/es/components/tree/src/model/node').default, shouldAutoExpandParent?: boolean) => void;
                setCurrentNodeKey: (key?: import('element-plus/es/components/tree/src/tree.type').TreeKey, shouldAutoExpandParent?: boolean) => void;
            }>;
            root: import('vue').Ref<{
                id: number;
                text: string;
                checked: boolean;
                indeterminate: boolean;
                data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
                expanded: boolean;
                parent: any;
                visible: boolean;
                isCurrent: boolean;
                store: any;
                isLeafByUser: boolean;
                isLeaf: boolean;
                canFocus: boolean;
                level: number;
                loaded: boolean;
                childNodes: any[];
                loading: boolean;
                initialize: () => void;
                setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                readonly label: string;
                readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
                readonly disabled: boolean;
                readonly nextSibling: any | null;
                readonly previousSibling: any | null;
                contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
                remove: () => void;
                insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
                insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                expand: (callback?: () => void, expandParent?: boolean) => void;
                doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                collapse: () => void;
                shouldLoadData: () => boolean;
                updateLeafState: () => void;
                setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
                updateChildren: () => void;
                loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
                reInitChecked: () => void;
            }>;
            currentNode: import('vue').Ref<{
                id: number;
                text: string;
                checked: boolean;
                indeterminate: boolean;
                data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
                expanded: boolean;
                parent: any;
                visible: boolean;
                isCurrent: boolean;
                store: any;
                isLeafByUser: boolean;
                isLeaf: boolean;
                canFocus: boolean;
                level: number;
                loaded: boolean;
                childNodes: any[];
                loading: boolean;
                initialize: () => void;
                setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                readonly label: string;
                readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
                readonly disabled: boolean;
                readonly nextSibling: any | null;
                readonly previousSibling: any | null;
                contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
                remove: () => void;
                insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
                insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                expand: (callback?: () => void, expandParent?: boolean) => void;
                doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                collapse: () => void;
                shouldLoadData: () => boolean;
                updateLeafState: () => void;
                setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
                updateChildren: () => void;
                loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
                reInitChecked: () => void;
            }>;
            dragState: import('vue').Ref<{
                showDropIndicator: boolean;
                draggingNode: null;
                dropNode: null;
                allowDrop: boolean;
                dropType: null;
            }>;
            el$: import('vue').Ref<import('element-plus/es/utils').Nullable<HTMLElement>>;
            dropIndicator$: import('vue').Ref<import('element-plus/es/utils').Nullable<HTMLElement>>;
            isEmpty: import('vue').ComputedRef<boolean>;
            filter: (value: any) => void;
            getNodeKey: (node: import('element-plus/es/components/tree/src/model/node').default) => any;
            getNodePath: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            getCheckedNodes: (leafOnly?: boolean, includeHalfChecked?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            getCheckedKeys: (leafOnly?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
            getCurrentNode: () => import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
            getCurrentKey: () => any;
            setCheckedNodes: (nodes: import('element-plus/es/components/tree/src/model/node').default[], leafOnly?: boolean) => void;
            setCheckedKeys: (keys: import('element-plus/es/components/tree/src/tree.type').TreeKey[], leafOnly?: boolean) => void;
            setChecked: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData, checked: boolean, deep: boolean) => void;
            getHalfCheckedNodes: () => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            getHalfCheckedKeys: () => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
            setCurrentNode: (node: import('element-plus/es/components/tree/src/model/node').default, shouldAutoExpandParent?: boolean) => void;
            setCurrentKey: (key?: import('element-plus/es/components/tree/src/tree.type').TreeKey, shouldAutoExpandParent?: boolean) => void;
            t: import('element-plus').Translator;
            getNode: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => import('element-plus/es/components/tree/src/model/node').default;
            remove: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
            append: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, parentNode: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/model/node').default) => void;
            insertBefore: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refNode: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
            insertAfter: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refNode: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
            handleNodeExpand: (nodeData: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default, instance: import('vue').ComponentInternalInstance) => void;
            updateKeyChildren: (key: import('element-plus/es/components/tree/src/tree.type').TreeKey, data: import('element-plus/es/components/tree/src/tree.type').TreeData) => void;
        }, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("current-change" | "check" | "node-expand" | "check-change" | "node-click" | "node-contextmenu" | "node-collapse" | "node-drag-start" | "node-drag-end" | "node-drop" | "node-drag-leave" | "node-drag-enter" | "node-drag-over")[], import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, {
            data: unknown[];
            props: import('element-plus/es/components/tree/src/tree.type').TreeOptionProps;
            checkStrictly: boolean;
            lazy: boolean;
            accordion: boolean;
            draggable: boolean;
            defaultExpandAll: boolean;
            indent: number;
            renderAfterExpand: boolean;
            showCheckbox: boolean;
            expandOnClickNode: boolean;
            checkOnClickNode: boolean;
            checkDescendants: boolean;
            autoExpandParent: boolean;
            highlightCurrent: boolean;
        }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<import('vue').ExtractPropTypes<{
            data: {
                type: ArrayConstructor;
                default: () => never[];
            };
            emptyText: {
                type: StringConstructor;
            };
            renderAfterExpand: {
                type: BooleanConstructor;
                default: boolean;
            };
            nodeKey: StringConstructor;
            checkStrictly: BooleanConstructor;
            defaultExpandAll: BooleanConstructor;
            expandOnClickNode: {
                type: BooleanConstructor;
                default: boolean;
            };
            checkOnClickNode: BooleanConstructor;
            checkDescendants: {
                type: BooleanConstructor;
                default: boolean;
            };
            autoExpandParent: {
                type: BooleanConstructor;
                default: boolean;
            };
            defaultCheckedKeys: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["defaultCheckedKeys"]>;
            defaultExpandedKeys: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["defaultExpandedKeys"]>;
            currentNodeKey: import('vue').PropType<string | number>;
            renderContent: FunctionConstructor;
            showCheckbox: {
                type: BooleanConstructor;
                default: boolean;
            };
            draggable: {
                type: BooleanConstructor;
                default: boolean;
            };
            allowDrag: FunctionConstructor;
            allowDrop: FunctionConstructor;
            props: {
                type: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["props"]>;
                default: () => {
                    children: string;
                    label: string;
                    disabled: string;
                };
            };
            lazy: {
                type: BooleanConstructor;
                default: boolean;
            };
            highlightCurrent: BooleanConstructor;
            load: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["load"]>;
            filterNodeMethod: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["filterNodeMethod"]>;
            accordion: BooleanConstructor;
            indent: {
                type: NumberConstructor;
                default: number;
            };
            icon: {
                type: import('vue').PropType<string | import('vue').Component>;
            };
        }>> & {
            "onCurrent-change"?: ((...args: any[]) => any) | undefined;
            "onNode-expand"?: ((...args: any[]) => any) | undefined;
            onCheck?: ((...args: any[]) => any) | undefined;
            "onCheck-change"?: ((...args: any[]) => any) | undefined;
            "onNode-click"?: ((...args: any[]) => any) | undefined;
            "onNode-contextmenu"?: ((...args: any[]) => any) | undefined;
            "onNode-collapse"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-start"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-end"?: ((...args: any[]) => any) | undefined;
            "onNode-drop"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-leave"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-enter"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-over"?: ((...args: any[]) => any) | undefined;
        }, {
            ns: {
                namespace: import('vue').ComputedRef<string>;
                b: (blockSuffix?: string) => string;
                e: (element?: string) => string;
                m: (modifier?: string) => string;
                be: (blockSuffix?: string, element?: string) => string;
                em: (element?: string, modifier?: string) => string;
                bm: (blockSuffix?: string, modifier?: string) => string;
                bem: (blockSuffix?: string, element?: string, modifier?: string) => string;
                is: {
                    (name: string, state: boolean | undefined): string;
                    (name: string): string;
                };
                cssVar: (object: Record<string, string>) => Record<string, string>;
                cssVarName: (name: string) => string;
                cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                cssVarBlockName: (name: string) => string;
            };
            store: import('vue').Ref<{
                currentNode: {
                    id: number;
                    text: string;
                    checked: boolean;
                    indeterminate: boolean;
                    data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
                    expanded: boolean;
                    parent: any;
                    visible: boolean;
                    isCurrent: boolean;
                    store: any;
                    isLeafByUser: boolean;
                    isLeaf: boolean;
                    canFocus: boolean;
                    level: number;
                    loaded: boolean;
                    childNodes: any[];
                    loading: boolean;
                    initialize: () => void;
                    setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                    readonly label: string;
                    readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
                    readonly disabled: boolean;
                    readonly nextSibling: any | null;
                    readonly previousSibling: any | null;
                    contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
                    remove: () => void;
                    insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
                    insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                    insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                    removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
                    removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                    expand: (callback?: () => void, expandParent?: boolean) => void;
                    doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                    collapse: () => void;
                    shouldLoadData: () => boolean;
                    updateLeafState: () => void;
                    setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                    getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
                    updateChildren: () => void;
                    loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                    eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
                    reInitChecked: () => void;
                };
                currentNodeKey: import('element-plus/es/components/tree/src/tree.type').TreeKey;
                nodesMap: import('element-plus/es/components/tree/src/tree.type').TreeStoreNodesMap;
                root: {
                    id: number;
                    text: string;
                    checked: boolean;
                    indeterminate: boolean;
                    data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
                    expanded: boolean;
                    parent: any;
                    visible: boolean;
                    isCurrent: boolean;
                    store: any;
                    isLeafByUser: boolean;
                    isLeaf: boolean;
                    canFocus: boolean;
                    level: number;
                    loaded: boolean;
                    childNodes: any[];
                    loading: boolean;
                    initialize: () => void;
                    setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                    readonly label: string;
                    readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
                    readonly disabled: boolean;
                    readonly nextSibling: any | null;
                    readonly previousSibling: any | null;
                    contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
                    remove: () => void;
                    insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
                    insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                    insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                    removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
                    removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                    expand: (callback?: () => void, expandParent?: boolean) => void;
                    doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                    collapse: () => void;
                    shouldLoadData: () => boolean;
                    updateLeafState: () => void;
                    setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                    getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
                    updateChildren: () => void;
                    loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                    eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
                    reInitChecked: () => void;
                };
                data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
                lazy: boolean;
                load: import('element-plus/es/components/tree/src/tree.type').LoadFunction;
                filterNodeMethod: import('element-plus/es/components/tree/src/tree.type').FilterNodeMethodFunction;
                key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
                defaultCheckedKeys: import('element-plus/es/components/tree/src/tree.type').TreeKey[];
                checkStrictly: boolean;
                defaultExpandedKeys: import('element-plus/es/components/tree/src/tree.type').TreeKey[];
                autoExpandParent: boolean;
                defaultExpandAll: boolean;
                checkDescendants: boolean;
                props: {
                    children?: string | undefined;
                    label?: (string | ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => string)) | undefined;
                    disabled?: (string | ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => boolean)) | undefined;
                    isLeaf?: (string | ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => boolean)) | undefined;
                    class?: ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => string | {
                        [key: string]: boolean;
                    }) | undefined;
                };
                initialize: () => void;
                filter: (value: import('element-plus/es/components/tree/src/tree.type').FilterValue) => void;
                setData: (newVal: import('element-plus/es/components/tree/src/tree.type').TreeData) => void;
                getNode: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => import('element-plus/es/components/tree/src/model/node').default;
                insertBefore: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refData: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
                insertAfter: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refData: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
                remove: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
                append: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, parentData: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/model/node').default) => void;
                _initDefaultCheckedNodes: () => void;
                _initDefaultCheckedNode: (node: import('element-plus/es/components/tree/src/model/node').default) => void;
                setDefaultCheckedKey: (newVal: import('element-plus/es/components/tree/src/tree.type').TreeKey[]) => void;
                registerNode: (node: import('element-plus/es/components/tree/src/model/node').default) => void;
                deregisterNode: (node: import('element-plus/es/components/tree/src/model/node').default) => void;
                getCheckedNodes: (leafOnly?: boolean, includeHalfChecked?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
                getCheckedKeys: (leafOnly?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
                getHalfCheckedNodes: () => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
                getHalfCheckedKeys: () => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
                _getAllNodes: () => import('element-plus/es/components/tree/src/model/node').default[];
                updateChildren: (key: import('element-plus/es/components/tree/src/tree.type').TreeKey, data: import('element-plus/es/components/tree/src/tree.type').TreeData) => void;
                _setCheckedKeys: (key: import('element-plus/es/components/tree/src/tree.type').TreeKey, leafOnly: boolean | undefined, checkedKeys: {
                    [key: string]: boolean;
                }) => void;
                setCheckedNodes: (array: import('element-plus/es/components/tree/src/model/node').default[], leafOnly?: boolean) => void;
                setCheckedKeys: (keys: import('element-plus/es/components/tree/src/tree.type').TreeKey[], leafOnly?: boolean) => void;
                setDefaultExpandedKeys: (keys: import('element-plus/es/components/tree/src/tree.type').TreeKey[]) => void;
                setChecked: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData, checked: boolean, deep: boolean) => void;
                getCurrentNode: () => import('element-plus/es/components/tree/src/model/node').default;
                setCurrentNode: (currentNode: import('element-plus/es/components/tree/src/model/node').default) => void;
                setUserCurrentNode: (node: import('element-plus/es/components/tree/src/model/node').default, shouldAutoExpandParent?: boolean) => void;
                setCurrentNodeKey: (key?: import('element-plus/es/components/tree/src/tree.type').TreeKey, shouldAutoExpandParent?: boolean) => void;
            }>;
            root: import('vue').Ref<{
                id: number;
                text: string;
                checked: boolean;
                indeterminate: boolean;
                data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
                expanded: boolean;
                parent: any;
                visible: boolean;
                isCurrent: boolean;
                store: any;
                isLeafByUser: boolean;
                isLeaf: boolean;
                canFocus: boolean;
                level: number;
                loaded: boolean;
                childNodes: any[];
                loading: boolean;
                initialize: () => void;
                setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                readonly label: string;
                readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
                readonly disabled: boolean;
                readonly nextSibling: any | null;
                readonly previousSibling: any | null;
                contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
                remove: () => void;
                insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
                insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                expand: (callback?: () => void, expandParent?: boolean) => void;
                doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                collapse: () => void;
                shouldLoadData: () => boolean;
                updateLeafState: () => void;
                setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
                updateChildren: () => void;
                loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
                reInitChecked: () => void;
            }>;
            currentNode: import('vue').Ref<{
                id: number;
                text: string;
                checked: boolean;
                indeterminate: boolean;
                data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
                expanded: boolean;
                parent: any;
                visible: boolean;
                isCurrent: boolean;
                store: any;
                isLeafByUser: boolean;
                isLeaf: boolean;
                canFocus: boolean;
                level: number;
                loaded: boolean;
                childNodes: any[];
                loading: boolean;
                initialize: () => void;
                setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                readonly label: string;
                readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
                readonly disabled: boolean;
                readonly nextSibling: any | null;
                readonly previousSibling: any | null;
                contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
                remove: () => void;
                insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
                insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                expand: (callback?: () => void, expandParent?: boolean) => void;
                doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                collapse: () => void;
                shouldLoadData: () => boolean;
                updateLeafState: () => void;
                setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
                updateChildren: () => void;
                loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
                reInitChecked: () => void;
            }>;
            dragState: import('vue').Ref<{
                showDropIndicator: boolean;
                draggingNode: null;
                dropNode: null;
                allowDrop: boolean;
                dropType: null;
            }>;
            el$: import('vue').Ref<import('element-plus/es/utils').Nullable<HTMLElement>>;
            dropIndicator$: import('vue').Ref<import('element-plus/es/utils').Nullable<HTMLElement>>;
            isEmpty: import('vue').ComputedRef<boolean>;
            filter: (value: any) => void;
            getNodeKey: (node: import('element-plus/es/components/tree/src/model/node').default) => any;
            getNodePath: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            getCheckedNodes: (leafOnly?: boolean, includeHalfChecked?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            getCheckedKeys: (leafOnly?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
            getCurrentNode: () => import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
            getCurrentKey: () => any;
            setCheckedNodes: (nodes: import('element-plus/es/components/tree/src/model/node').default[], leafOnly?: boolean) => void;
            setCheckedKeys: (keys: import('element-plus/es/components/tree/src/tree.type').TreeKey[], leafOnly?: boolean) => void;
            setChecked: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData, checked: boolean, deep: boolean) => void;
            getHalfCheckedNodes: () => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            getHalfCheckedKeys: () => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
            setCurrentNode: (node: import('element-plus/es/components/tree/src/model/node').default, shouldAutoExpandParent?: boolean) => void;
            setCurrentKey: (key?: import('element-plus/es/components/tree/src/tree.type').TreeKey, shouldAutoExpandParent?: boolean) => void;
            t: import('element-plus').Translator;
            getNode: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => import('element-plus/es/components/tree/src/model/node').default;
            remove: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
            append: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, parentNode: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/model/node').default) => void;
            insertBefore: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refNode: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
            insertAfter: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refNode: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
            handleNodeExpand: (nodeData: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default, instance: import('vue').ComponentInternalInstance) => void;
            updateKeyChildren: (key: import('element-plus/es/components/tree/src/tree.type').TreeKey, data: import('element-plus/es/components/tree/src/tree.type').TreeData) => void;
        }, {}, {}, {}, {
            data: unknown[];
            props: import('element-plus/es/components/tree/src/tree.type').TreeOptionProps;
            checkStrictly: boolean;
            lazy: boolean;
            accordion: boolean;
            draggable: boolean;
            defaultExpandAll: boolean;
            indent: number;
            renderAfterExpand: boolean;
            showCheckbox: boolean;
            expandOnClickNode: boolean;
            checkOnClickNode: boolean;
            checkDescendants: boolean;
            autoExpandParent: boolean;
            highlightCurrent: boolean;
        }> | null;
    };
    attrs: Partial<{}>;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<TreeFilterProps, {
    treeData: import('vue').Ref<{
        [key: string]: any;
    }[], {
        [key: string]: any;
    }[]>;
    treeAllData: import('vue').Ref<{
        [key: string]: any;
    }[], {
        [key: string]: any;
    }[]>;
    treeRef: import('vue').Ref<import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        data: {
            type: ArrayConstructor;
            default: () => never[];
        };
        emptyText: {
            type: StringConstructor;
        };
        renderAfterExpand: {
            type: BooleanConstructor;
            default: boolean;
        };
        nodeKey: StringConstructor;
        checkStrictly: BooleanConstructor;
        defaultExpandAll: BooleanConstructor;
        expandOnClickNode: {
            type: BooleanConstructor;
            default: boolean;
        };
        checkOnClickNode: BooleanConstructor;
        checkDescendants: {
            type: BooleanConstructor;
            default: boolean;
        };
        autoExpandParent: {
            type: BooleanConstructor;
            default: boolean;
        };
        defaultCheckedKeys: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["defaultCheckedKeys"]>;
        defaultExpandedKeys: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["defaultExpandedKeys"]>;
        currentNodeKey: import('vue').PropType<string | number>;
        renderContent: FunctionConstructor;
        showCheckbox: {
            type: BooleanConstructor;
            default: boolean;
        };
        draggable: {
            type: BooleanConstructor;
            default: boolean;
        };
        allowDrag: FunctionConstructor;
        allowDrop: FunctionConstructor;
        props: {
            type: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["props"]>;
            default: () => {
                children: string;
                label: string;
                disabled: string;
            };
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        highlightCurrent: BooleanConstructor;
        load: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["load"]>;
        filterNodeMethod: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["filterNodeMethod"]>;
        accordion: BooleanConstructor;
        indent: {
            type: NumberConstructor;
            default: number;
        };
        icon: {
            type: import('vue').PropType<string | import('vue').Component>;
        };
    }>> & {
        "onCurrent-change"?: ((...args: any[]) => any) | undefined;
        "onNode-expand"?: ((...args: any[]) => any) | undefined;
        onCheck?: ((...args: any[]) => any) | undefined;
        "onCheck-change"?: ((...args: any[]) => any) | undefined;
        "onNode-click"?: ((...args: any[]) => any) | undefined;
        "onNode-contextmenu"?: ((...args: any[]) => any) | undefined;
        "onNode-collapse"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-start"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-end"?: ((...args: any[]) => any) | undefined;
        "onNode-drop"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-leave"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-enter"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-over"?: ((...args: any[]) => any) | undefined;
    }, {
        ns: {
            namespace: import('vue').ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string) => string;
            m: (modifier?: string) => string;
            be: (blockSuffix?: string, element?: string) => string;
            em: (element?: string, modifier?: string) => string;
            bm: (blockSuffix?: string, modifier?: string) => string;
            bem: (blockSuffix?: string, element?: string, modifier?: string) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
        store: import('vue').Ref<{
            currentNode: {
                id: number;
                text: string;
                checked: boolean;
                indeterminate: boolean;
                data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
                expanded: boolean;
                parent: any;
                visible: boolean;
                isCurrent: boolean;
                store: any;
                isLeafByUser: boolean;
                isLeaf: boolean;
                canFocus: boolean;
                level: number;
                loaded: boolean;
                childNodes: any[];
                loading: boolean;
                initialize: () => void;
                setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                readonly label: string;
                readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
                readonly disabled: boolean;
                readonly nextSibling: any | null;
                readonly previousSibling: any | null;
                contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
                remove: () => void;
                insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
                insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                expand: (callback?: () => void, expandParent?: boolean) => void;
                doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                collapse: () => void;
                shouldLoadData: () => boolean;
                updateLeafState: () => void;
                setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
                updateChildren: () => void;
                loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
                reInitChecked: () => void;
            };
            currentNodeKey: import('element-plus/es/components/tree/src/tree.type').TreeKey;
            nodesMap: import('element-plus/es/components/tree/src/tree.type').TreeStoreNodesMap;
            root: {
                id: number;
                text: string;
                checked: boolean;
                indeterminate: boolean;
                data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
                expanded: boolean;
                parent: any;
                visible: boolean;
                isCurrent: boolean;
                store: any;
                isLeafByUser: boolean;
                isLeaf: boolean;
                canFocus: boolean;
                level: number;
                loaded: boolean;
                childNodes: any[];
                loading: boolean;
                initialize: () => void;
                setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                readonly label: string;
                readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
                readonly disabled: boolean;
                readonly nextSibling: any | null;
                readonly previousSibling: any | null;
                contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
                remove: () => void;
                insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
                insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                expand: (callback?: () => void, expandParent?: boolean) => void;
                doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                collapse: () => void;
                shouldLoadData: () => boolean;
                updateLeafState: () => void;
                setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
                updateChildren: () => void;
                loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
                reInitChecked: () => void;
            };
            data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            lazy: boolean;
            load: import('element-plus/es/components/tree/src/tree.type').LoadFunction;
            filterNodeMethod: import('element-plus/es/components/tree/src/tree.type').FilterNodeMethodFunction;
            key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
            defaultCheckedKeys: import('element-plus/es/components/tree/src/tree.type').TreeKey[];
            checkStrictly: boolean;
            defaultExpandedKeys: import('element-plus/es/components/tree/src/tree.type').TreeKey[];
            autoExpandParent: boolean;
            defaultExpandAll: boolean;
            checkDescendants: boolean;
            props: {
                children?: string | undefined;
                label?: (string | ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => string)) | undefined;
                disabled?: (string | ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => boolean)) | undefined;
                isLeaf?: (string | ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => boolean)) | undefined;
                class?: ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => string | {
                    [key: string]: boolean;
                }) | undefined;
            };
            initialize: () => void;
            filter: (value: import('element-plus/es/components/tree/src/tree.type').FilterValue) => void;
            setData: (newVal: import('element-plus/es/components/tree/src/tree.type').TreeData) => void;
            getNode: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => import('element-plus/es/components/tree/src/model/node').default;
            insertBefore: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refData: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
            insertAfter: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refData: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
            remove: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
            append: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, parentData: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/model/node').default) => void;
            _initDefaultCheckedNodes: () => void;
            _initDefaultCheckedNode: (node: import('element-plus/es/components/tree/src/model/node').default) => void;
            setDefaultCheckedKey: (newVal: import('element-plus/es/components/tree/src/tree.type').TreeKey[]) => void;
            registerNode: (node: import('element-plus/es/components/tree/src/model/node').default) => void;
            deregisterNode: (node: import('element-plus/es/components/tree/src/model/node').default) => void;
            getCheckedNodes: (leafOnly?: boolean, includeHalfChecked?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            getCheckedKeys: (leafOnly?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
            getHalfCheckedNodes: () => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            getHalfCheckedKeys: () => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
            _getAllNodes: () => import('element-plus/es/components/tree/src/model/node').default[];
            updateChildren: (key: import('element-plus/es/components/tree/src/tree.type').TreeKey, data: import('element-plus/es/components/tree/src/tree.type').TreeData) => void;
            _setCheckedKeys: (key: import('element-plus/es/components/tree/src/tree.type').TreeKey, leafOnly: boolean | undefined, checkedKeys: {
                [key: string]: boolean;
            }) => void;
            setCheckedNodes: (array: import('element-plus/es/components/tree/src/model/node').default[], leafOnly?: boolean) => void;
            setCheckedKeys: (keys: import('element-plus/es/components/tree/src/tree.type').TreeKey[], leafOnly?: boolean) => void;
            setDefaultExpandedKeys: (keys: import('element-plus/es/components/tree/src/tree.type').TreeKey[]) => void;
            setChecked: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData, checked: boolean, deep: boolean) => void;
            getCurrentNode: () => import('element-plus/es/components/tree/src/model/node').default;
            setCurrentNode: (currentNode: import('element-plus/es/components/tree/src/model/node').default) => void;
            setUserCurrentNode: (node: import('element-plus/es/components/tree/src/model/node').default, shouldAutoExpandParent?: boolean) => void;
            setCurrentNodeKey: (key?: import('element-plus/es/components/tree/src/tree.type').TreeKey, shouldAutoExpandParent?: boolean) => void;
        }>;
        root: import('vue').Ref<{
            id: number;
            text: string;
            checked: boolean;
            indeterminate: boolean;
            data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
            expanded: boolean;
            parent: any;
            visible: boolean;
            isCurrent: boolean;
            store: any;
            isLeafByUser: boolean;
            isLeaf: boolean;
            canFocus: boolean;
            level: number;
            loaded: boolean;
            childNodes: any[];
            loading: boolean;
            initialize: () => void;
            setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
            readonly label: string;
            readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
            readonly disabled: boolean;
            readonly nextSibling: any | null;
            readonly previousSibling: any | null;
            contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
            remove: () => void;
            insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
            insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
            insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
            removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
            removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
            expand: (callback?: () => void, expandParent?: boolean) => void;
            doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
            collapse: () => void;
            shouldLoadData: () => boolean;
            updateLeafState: () => void;
            setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
            getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            updateChildren: () => void;
            loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
            eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
            reInitChecked: () => void;
        }>;
        currentNode: import('vue').Ref<{
            id: number;
            text: string;
            checked: boolean;
            indeterminate: boolean;
            data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
            expanded: boolean;
            parent: any;
            visible: boolean;
            isCurrent: boolean;
            store: any;
            isLeafByUser: boolean;
            isLeaf: boolean;
            canFocus: boolean;
            level: number;
            loaded: boolean;
            childNodes: any[];
            loading: boolean;
            initialize: () => void;
            setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
            readonly label: string;
            readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
            readonly disabled: boolean;
            readonly nextSibling: any | null;
            readonly previousSibling: any | null;
            contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
            remove: () => void;
            insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
            insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
            insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
            removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
            removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
            expand: (callback?: () => void, expandParent?: boolean) => void;
            doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
            collapse: () => void;
            shouldLoadData: () => boolean;
            updateLeafState: () => void;
            setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
            getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            updateChildren: () => void;
            loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
            eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
            reInitChecked: () => void;
        }>;
        dragState: import('vue').Ref<{
            showDropIndicator: boolean;
            draggingNode: null;
            dropNode: null;
            allowDrop: boolean;
            dropType: null;
        }>;
        el$: import('vue').Ref<import('element-plus/es/utils').Nullable<HTMLElement>>;
        dropIndicator$: import('vue').Ref<import('element-plus/es/utils').Nullable<HTMLElement>>;
        isEmpty: import('vue').ComputedRef<boolean>;
        filter: (value: any) => void;
        getNodeKey: (node: import('element-plus/es/components/tree/src/model/node').default) => any;
        getNodePath: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
        getCheckedNodes: (leafOnly?: boolean, includeHalfChecked?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
        getCheckedKeys: (leafOnly?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
        getCurrentNode: () => import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
        getCurrentKey: () => any;
        setCheckedNodes: (nodes: import('element-plus/es/components/tree/src/model/node').default[], leafOnly?: boolean) => void;
        setCheckedKeys: (keys: import('element-plus/es/components/tree/src/tree.type').TreeKey[], leafOnly?: boolean) => void;
        setChecked: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData, checked: boolean, deep: boolean) => void;
        getHalfCheckedNodes: () => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
        getHalfCheckedKeys: () => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
        setCurrentNode: (node: import('element-plus/es/components/tree/src/model/node').default, shouldAutoExpandParent?: boolean) => void;
        setCurrentKey: (key?: import('element-plus/es/components/tree/src/tree.type').TreeKey, shouldAutoExpandParent?: boolean) => void;
        t: import('element-plus').Translator;
        getNode: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => import('element-plus/es/components/tree/src/model/node').default;
        remove: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
        append: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, parentNode: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/model/node').default) => void;
        insertBefore: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refNode: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
        insertAfter: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refNode: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
        handleNodeExpand: (nodeData: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default, instance: import('vue').ComponentInternalInstance) => void;
        updateKeyChildren: (key: import('element-plus/es/components/tree/src/tree.type').TreeKey, data: import('element-plus/es/components/tree/src/tree.type').TreeData) => void;
    }, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("current-change" | "check" | "node-expand" | "check-change" | "node-click" | "node-contextmenu" | "node-collapse" | "node-drag-start" | "node-drag-end" | "node-drop" | "node-drag-leave" | "node-drag-enter" | "node-drag-over")[], import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, {
        data: unknown[];
        props: import('element-plus/es/components/tree/src/tree.type').TreeOptionProps;
        checkStrictly: boolean;
        lazy: boolean;
        accordion: boolean;
        draggable: boolean;
        defaultExpandAll: boolean;
        indent: number;
        renderAfterExpand: boolean;
        showCheckbox: boolean;
        expandOnClickNode: boolean;
        checkOnClickNode: boolean;
        checkDescendants: boolean;
        autoExpandParent: boolean;
        highlightCurrent: boolean;
    }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        data: {
            type: ArrayConstructor;
            default: () => never[];
        };
        emptyText: {
            type: StringConstructor;
        };
        renderAfterExpand: {
            type: BooleanConstructor;
            default: boolean;
        };
        nodeKey: StringConstructor;
        checkStrictly: BooleanConstructor;
        defaultExpandAll: BooleanConstructor;
        expandOnClickNode: {
            type: BooleanConstructor;
            default: boolean;
        };
        checkOnClickNode: BooleanConstructor;
        checkDescendants: {
            type: BooleanConstructor;
            default: boolean;
        };
        autoExpandParent: {
            type: BooleanConstructor;
            default: boolean;
        };
        defaultCheckedKeys: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["defaultCheckedKeys"]>;
        defaultExpandedKeys: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["defaultExpandedKeys"]>;
        currentNodeKey: import('vue').PropType<string | number>;
        renderContent: FunctionConstructor;
        showCheckbox: {
            type: BooleanConstructor;
            default: boolean;
        };
        draggable: {
            type: BooleanConstructor;
            default: boolean;
        };
        allowDrag: FunctionConstructor;
        allowDrop: FunctionConstructor;
        props: {
            type: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["props"]>;
            default: () => {
                children: string;
                label: string;
                disabled: string;
            };
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        highlightCurrent: BooleanConstructor;
        load: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["load"]>;
        filterNodeMethod: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["filterNodeMethod"]>;
        accordion: BooleanConstructor;
        indent: {
            type: NumberConstructor;
            default: number;
        };
        icon: {
            type: import('vue').PropType<string | import('vue').Component>;
        };
    }>> & {
        "onCurrent-change"?: ((...args: any[]) => any) | undefined;
        "onNode-expand"?: ((...args: any[]) => any) | undefined;
        onCheck?: ((...args: any[]) => any) | undefined;
        "onCheck-change"?: ((...args: any[]) => any) | undefined;
        "onNode-click"?: ((...args: any[]) => any) | undefined;
        "onNode-contextmenu"?: ((...args: any[]) => any) | undefined;
        "onNode-collapse"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-start"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-end"?: ((...args: any[]) => any) | undefined;
        "onNode-drop"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-leave"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-enter"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-over"?: ((...args: any[]) => any) | undefined;
    }, {
        ns: {
            namespace: import('vue').ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string) => string;
            m: (modifier?: string) => string;
            be: (blockSuffix?: string, element?: string) => string;
            em: (element?: string, modifier?: string) => string;
            bm: (blockSuffix?: string, modifier?: string) => string;
            bem: (blockSuffix?: string, element?: string, modifier?: string) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
        store: import('vue').Ref<{
            currentNode: {
                id: number;
                text: string;
                checked: boolean;
                indeterminate: boolean;
                data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
                expanded: boolean;
                parent: any;
                visible: boolean;
                isCurrent: boolean;
                store: any;
                isLeafByUser: boolean;
                isLeaf: boolean;
                canFocus: boolean;
                level: number;
                loaded: boolean;
                childNodes: any[];
                loading: boolean;
                initialize: () => void;
                setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                readonly label: string;
                readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
                readonly disabled: boolean;
                readonly nextSibling: any | null;
                readonly previousSibling: any | null;
                contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
                remove: () => void;
                insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
                insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                expand: (callback?: () => void, expandParent?: boolean) => void;
                doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                collapse: () => void;
                shouldLoadData: () => boolean;
                updateLeafState: () => void;
                setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
                updateChildren: () => void;
                loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
                reInitChecked: () => void;
            };
            currentNodeKey: import('element-plus/es/components/tree/src/tree.type').TreeKey;
            nodesMap: import('element-plus/es/components/tree/src/tree.type').TreeStoreNodesMap;
            root: {
                id: number;
                text: string;
                checked: boolean;
                indeterminate: boolean;
                data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
                expanded: boolean;
                parent: any;
                visible: boolean;
                isCurrent: boolean;
                store: any;
                isLeafByUser: boolean;
                isLeaf: boolean;
                canFocus: boolean;
                level: number;
                loaded: boolean;
                childNodes: any[];
                loading: boolean;
                initialize: () => void;
                setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                readonly label: string;
                readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
                readonly disabled: boolean;
                readonly nextSibling: any | null;
                readonly previousSibling: any | null;
                contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
                remove: () => void;
                insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
                insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                expand: (callback?: () => void, expandParent?: boolean) => void;
                doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                collapse: () => void;
                shouldLoadData: () => boolean;
                updateLeafState: () => void;
                setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
                updateChildren: () => void;
                loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
                reInitChecked: () => void;
            };
            data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            lazy: boolean;
            load: import('element-plus/es/components/tree/src/tree.type').LoadFunction;
            filterNodeMethod: import('element-plus/es/components/tree/src/tree.type').FilterNodeMethodFunction;
            key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
            defaultCheckedKeys: import('element-plus/es/components/tree/src/tree.type').TreeKey[];
            checkStrictly: boolean;
            defaultExpandedKeys: import('element-plus/es/components/tree/src/tree.type').TreeKey[];
            autoExpandParent: boolean;
            defaultExpandAll: boolean;
            checkDescendants: boolean;
            props: {
                children?: string | undefined;
                label?: (string | ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => string)) | undefined;
                disabled?: (string | ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => boolean)) | undefined;
                isLeaf?: (string | ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => boolean)) | undefined;
                class?: ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => string | {
                    [key: string]: boolean;
                }) | undefined;
            };
            initialize: () => void;
            filter: (value: import('element-plus/es/components/tree/src/tree.type').FilterValue) => void;
            setData: (newVal: import('element-plus/es/components/tree/src/tree.type').TreeData) => void;
            getNode: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => import('element-plus/es/components/tree/src/model/node').default;
            insertBefore: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refData: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
            insertAfter: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refData: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
            remove: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
            append: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, parentData: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/model/node').default) => void;
            _initDefaultCheckedNodes: () => void;
            _initDefaultCheckedNode: (node: import('element-plus/es/components/tree/src/model/node').default) => void;
            setDefaultCheckedKey: (newVal: import('element-plus/es/components/tree/src/tree.type').TreeKey[]) => void;
            registerNode: (node: import('element-plus/es/components/tree/src/model/node').default) => void;
            deregisterNode: (node: import('element-plus/es/components/tree/src/model/node').default) => void;
            getCheckedNodes: (leafOnly?: boolean, includeHalfChecked?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            getCheckedKeys: (leafOnly?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
            getHalfCheckedNodes: () => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            getHalfCheckedKeys: () => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
            _getAllNodes: () => import('element-plus/es/components/tree/src/model/node').default[];
            updateChildren: (key: import('element-plus/es/components/tree/src/tree.type').TreeKey, data: import('element-plus/es/components/tree/src/tree.type').TreeData) => void;
            _setCheckedKeys: (key: import('element-plus/es/components/tree/src/tree.type').TreeKey, leafOnly: boolean | undefined, checkedKeys: {
                [key: string]: boolean;
            }) => void;
            setCheckedNodes: (array: import('element-plus/es/components/tree/src/model/node').default[], leafOnly?: boolean) => void;
            setCheckedKeys: (keys: import('element-plus/es/components/tree/src/tree.type').TreeKey[], leafOnly?: boolean) => void;
            setDefaultExpandedKeys: (keys: import('element-plus/es/components/tree/src/tree.type').TreeKey[]) => void;
            setChecked: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData, checked: boolean, deep: boolean) => void;
            getCurrentNode: () => import('element-plus/es/components/tree/src/model/node').default;
            setCurrentNode: (currentNode: import('element-plus/es/components/tree/src/model/node').default) => void;
            setUserCurrentNode: (node: import('element-plus/es/components/tree/src/model/node').default, shouldAutoExpandParent?: boolean) => void;
            setCurrentNodeKey: (key?: import('element-plus/es/components/tree/src/tree.type').TreeKey, shouldAutoExpandParent?: boolean) => void;
        }>;
        root: import('vue').Ref<{
            id: number;
            text: string;
            checked: boolean;
            indeterminate: boolean;
            data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
            expanded: boolean;
            parent: any;
            visible: boolean;
            isCurrent: boolean;
            store: any;
            isLeafByUser: boolean;
            isLeaf: boolean;
            canFocus: boolean;
            level: number;
            loaded: boolean;
            childNodes: any[];
            loading: boolean;
            initialize: () => void;
            setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
            readonly label: string;
            readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
            readonly disabled: boolean;
            readonly nextSibling: any | null;
            readonly previousSibling: any | null;
            contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
            remove: () => void;
            insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
            insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
            insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
            removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
            removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
            expand: (callback?: () => void, expandParent?: boolean) => void;
            doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
            collapse: () => void;
            shouldLoadData: () => boolean;
            updateLeafState: () => void;
            setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
            getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            updateChildren: () => void;
            loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
            eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
            reInitChecked: () => void;
        }>;
        currentNode: import('vue').Ref<{
            id: number;
            text: string;
            checked: boolean;
            indeterminate: boolean;
            data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
            expanded: boolean;
            parent: any;
            visible: boolean;
            isCurrent: boolean;
            store: any;
            isLeafByUser: boolean;
            isLeaf: boolean;
            canFocus: boolean;
            level: number;
            loaded: boolean;
            childNodes: any[];
            loading: boolean;
            initialize: () => void;
            setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
            readonly label: string;
            readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
            readonly disabled: boolean;
            readonly nextSibling: any | null;
            readonly previousSibling: any | null;
            contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
            remove: () => void;
            insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
            insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
            insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
            removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
            removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
            expand: (callback?: () => void, expandParent?: boolean) => void;
            doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
            collapse: () => void;
            shouldLoadData: () => boolean;
            updateLeafState: () => void;
            setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
            getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            updateChildren: () => void;
            loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
            eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
            reInitChecked: () => void;
        }>;
        dragState: import('vue').Ref<{
            showDropIndicator: boolean;
            draggingNode: null;
            dropNode: null;
            allowDrop: boolean;
            dropType: null;
        }>;
        el$: import('vue').Ref<import('element-plus/es/utils').Nullable<HTMLElement>>;
        dropIndicator$: import('vue').Ref<import('element-plus/es/utils').Nullable<HTMLElement>>;
        isEmpty: import('vue').ComputedRef<boolean>;
        filter: (value: any) => void;
        getNodeKey: (node: import('element-plus/es/components/tree/src/model/node').default) => any;
        getNodePath: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
        getCheckedNodes: (leafOnly?: boolean, includeHalfChecked?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
        getCheckedKeys: (leafOnly?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
        getCurrentNode: () => import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
        getCurrentKey: () => any;
        setCheckedNodes: (nodes: import('element-plus/es/components/tree/src/model/node').default[], leafOnly?: boolean) => void;
        setCheckedKeys: (keys: import('element-plus/es/components/tree/src/tree.type').TreeKey[], leafOnly?: boolean) => void;
        setChecked: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData, checked: boolean, deep: boolean) => void;
        getHalfCheckedNodes: () => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
        getHalfCheckedKeys: () => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
        setCurrentNode: (node: import('element-plus/es/components/tree/src/model/node').default, shouldAutoExpandParent?: boolean) => void;
        setCurrentKey: (key?: import('element-plus/es/components/tree/src/tree.type').TreeKey, shouldAutoExpandParent?: boolean) => void;
        t: import('element-plus').Translator;
        getNode: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => import('element-plus/es/components/tree/src/model/node').default;
        remove: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
        append: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, parentNode: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/model/node').default) => void;
        insertBefore: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refNode: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
        insertAfter: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refNode: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
        handleNodeExpand: (nodeData: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default, instance: import('vue').ComponentInternalInstance) => void;
        updateKeyChildren: (key: import('element-plus/es/components/tree/src/tree.type').TreeKey, data: import('element-plus/es/components/tree/src/tree.type').TreeData) => void;
    }, {}, {}, {}, {
        data: unknown[];
        props: import('element-plus/es/components/tree/src/tree.type').TreeOptionProps;
        checkStrictly: boolean;
        lazy: boolean;
        accordion: boolean;
        draggable: boolean;
        defaultExpandAll: boolean;
        indent: number;
        renderAfterExpand: boolean;
        showCheckbox: boolean;
        expandOnClickNode: boolean;
        checkOnClickNode: boolean;
        checkDescendants: boolean;
        autoExpandParent: boolean;
        highlightCurrent: boolean;
    }> | undefined, import('vue').CreateComponentPublicInstanceWithMixins<Readonly<import('vue').ExtractPropTypes<{
        data: {
            type: ArrayConstructor;
            default: () => never[];
        };
        emptyText: {
            type: StringConstructor;
        };
        renderAfterExpand: {
            type: BooleanConstructor;
            default: boolean;
        };
        nodeKey: StringConstructor;
        checkStrictly: BooleanConstructor;
        defaultExpandAll: BooleanConstructor;
        expandOnClickNode: {
            type: BooleanConstructor;
            default: boolean;
        };
        checkOnClickNode: BooleanConstructor;
        checkDescendants: {
            type: BooleanConstructor;
            default: boolean;
        };
        autoExpandParent: {
            type: BooleanConstructor;
            default: boolean;
        };
        defaultCheckedKeys: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["defaultCheckedKeys"]>;
        defaultExpandedKeys: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["defaultExpandedKeys"]>;
        currentNodeKey: import('vue').PropType<string | number>;
        renderContent: FunctionConstructor;
        showCheckbox: {
            type: BooleanConstructor;
            default: boolean;
        };
        draggable: {
            type: BooleanConstructor;
            default: boolean;
        };
        allowDrag: FunctionConstructor;
        allowDrop: FunctionConstructor;
        props: {
            type: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["props"]>;
            default: () => {
                children: string;
                label: string;
                disabled: string;
            };
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        highlightCurrent: BooleanConstructor;
        load: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["load"]>;
        filterNodeMethod: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["filterNodeMethod"]>;
        accordion: BooleanConstructor;
        indent: {
            type: NumberConstructor;
            default: number;
        };
        icon: {
            type: import('vue').PropType<string | import('vue').Component>;
        };
    }>> & {
        "onCurrent-change"?: ((...args: any[]) => any) | undefined;
        "onNode-expand"?: ((...args: any[]) => any) | undefined;
        onCheck?: ((...args: any[]) => any) | undefined;
        "onCheck-change"?: ((...args: any[]) => any) | undefined;
        "onNode-click"?: ((...args: any[]) => any) | undefined;
        "onNode-contextmenu"?: ((...args: any[]) => any) | undefined;
        "onNode-collapse"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-start"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-end"?: ((...args: any[]) => any) | undefined;
        "onNode-drop"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-leave"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-enter"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-over"?: ((...args: any[]) => any) | undefined;
    }, {
        ns: {
            namespace: import('vue').ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string) => string;
            m: (modifier?: string) => string;
            be: (blockSuffix?: string, element?: string) => string;
            em: (element?: string, modifier?: string) => string;
            bm: (blockSuffix?: string, modifier?: string) => string;
            bem: (blockSuffix?: string, element?: string, modifier?: string) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
        store: import('vue').Ref<{
            currentNode: {
                id: number;
                text: string;
                checked: boolean;
                indeterminate: boolean;
                data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
                expanded: boolean;
                parent: any;
                visible: boolean;
                isCurrent: boolean;
                store: any;
                isLeafByUser: boolean;
                isLeaf: boolean;
                canFocus: boolean;
                level: number;
                loaded: boolean;
                childNodes: any[];
                loading: boolean;
                initialize: () => void;
                setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                readonly label: string;
                readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
                readonly disabled: boolean;
                readonly nextSibling: any | null;
                readonly previousSibling: any | null;
                contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
                remove: () => void;
                insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
                insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                expand: (callback?: () => void, expandParent?: boolean) => void;
                doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                collapse: () => void;
                shouldLoadData: () => boolean;
                updateLeafState: () => void;
                setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
                updateChildren: () => void;
                loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
                reInitChecked: () => void;
            };
            currentNodeKey: import('element-plus/es/components/tree/src/tree.type').TreeKey;
            nodesMap: import('element-plus/es/components/tree/src/tree.type').TreeStoreNodesMap;
            root: {
                id: number;
                text: string;
                checked: boolean;
                indeterminate: boolean;
                data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
                expanded: boolean;
                parent: any;
                visible: boolean;
                isCurrent: boolean;
                store: any;
                isLeafByUser: boolean;
                isLeaf: boolean;
                canFocus: boolean;
                level: number;
                loaded: boolean;
                childNodes: any[];
                loading: boolean;
                initialize: () => void;
                setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                readonly label: string;
                readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
                readonly disabled: boolean;
                readonly nextSibling: any | null;
                readonly previousSibling: any | null;
                contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
                remove: () => void;
                insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
                insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                expand: (callback?: () => void, expandParent?: boolean) => void;
                doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                collapse: () => void;
                shouldLoadData: () => boolean;
                updateLeafState: () => void;
                setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
                updateChildren: () => void;
                loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
                reInitChecked: () => void;
            };
            data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            lazy: boolean;
            load: import('element-plus/es/components/tree/src/tree.type').LoadFunction;
            filterNodeMethod: import('element-plus/es/components/tree/src/tree.type').FilterNodeMethodFunction;
            key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
            defaultCheckedKeys: import('element-plus/es/components/tree/src/tree.type').TreeKey[];
            checkStrictly: boolean;
            defaultExpandedKeys: import('element-plus/es/components/tree/src/tree.type').TreeKey[];
            autoExpandParent: boolean;
            defaultExpandAll: boolean;
            checkDescendants: boolean;
            props: {
                children?: string | undefined;
                label?: (string | ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => string)) | undefined;
                disabled?: (string | ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => boolean)) | undefined;
                isLeaf?: (string | ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => boolean)) | undefined;
                class?: ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => string | {
                    [key: string]: boolean;
                }) | undefined;
            };
            initialize: () => void;
            filter: (value: import('element-plus/es/components/tree/src/tree.type').FilterValue) => void;
            setData: (newVal: import('element-plus/es/components/tree/src/tree.type').TreeData) => void;
            getNode: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => import('element-plus/es/components/tree/src/model/node').default;
            insertBefore: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refData: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
            insertAfter: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refData: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
            remove: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
            append: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, parentData: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/model/node').default) => void;
            _initDefaultCheckedNodes: () => void;
            _initDefaultCheckedNode: (node: import('element-plus/es/components/tree/src/model/node').default) => void;
            setDefaultCheckedKey: (newVal: import('element-plus/es/components/tree/src/tree.type').TreeKey[]) => void;
            registerNode: (node: import('element-plus/es/components/tree/src/model/node').default) => void;
            deregisterNode: (node: import('element-plus/es/components/tree/src/model/node').default) => void;
            getCheckedNodes: (leafOnly?: boolean, includeHalfChecked?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            getCheckedKeys: (leafOnly?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
            getHalfCheckedNodes: () => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            getHalfCheckedKeys: () => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
            _getAllNodes: () => import('element-plus/es/components/tree/src/model/node').default[];
            updateChildren: (key: import('element-plus/es/components/tree/src/tree.type').TreeKey, data: import('element-plus/es/components/tree/src/tree.type').TreeData) => void;
            _setCheckedKeys: (key: import('element-plus/es/components/tree/src/tree.type').TreeKey, leafOnly: boolean | undefined, checkedKeys: {
                [key: string]: boolean;
            }) => void;
            setCheckedNodes: (array: import('element-plus/es/components/tree/src/model/node').default[], leafOnly?: boolean) => void;
            setCheckedKeys: (keys: import('element-plus/es/components/tree/src/tree.type').TreeKey[], leafOnly?: boolean) => void;
            setDefaultExpandedKeys: (keys: import('element-plus/es/components/tree/src/tree.type').TreeKey[]) => void;
            setChecked: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData, checked: boolean, deep: boolean) => void;
            getCurrentNode: () => import('element-plus/es/components/tree/src/model/node').default;
            setCurrentNode: (currentNode: import('element-plus/es/components/tree/src/model/node').default) => void;
            setUserCurrentNode: (node: import('element-plus/es/components/tree/src/model/node').default, shouldAutoExpandParent?: boolean) => void;
            setCurrentNodeKey: (key?: import('element-plus/es/components/tree/src/tree.type').TreeKey, shouldAutoExpandParent?: boolean) => void;
        }>;
        root: import('vue').Ref<{
            id: number;
            text: string;
            checked: boolean;
            indeterminate: boolean;
            data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
            expanded: boolean;
            parent: any;
            visible: boolean;
            isCurrent: boolean;
            store: any;
            isLeafByUser: boolean;
            isLeaf: boolean;
            canFocus: boolean;
            level: number;
            loaded: boolean;
            childNodes: any[];
            loading: boolean;
            initialize: () => void;
            setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
            readonly label: string;
            readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
            readonly disabled: boolean;
            readonly nextSibling: any | null;
            readonly previousSibling: any | null;
            contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
            remove: () => void;
            insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
            insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
            insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
            removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
            removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
            expand: (callback?: () => void, expandParent?: boolean) => void;
            doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
            collapse: () => void;
            shouldLoadData: () => boolean;
            updateLeafState: () => void;
            setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
            getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            updateChildren: () => void;
            loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
            eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
            reInitChecked: () => void;
        }>;
        currentNode: import('vue').Ref<{
            id: number;
            text: string;
            checked: boolean;
            indeterminate: boolean;
            data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
            expanded: boolean;
            parent: any;
            visible: boolean;
            isCurrent: boolean;
            store: any;
            isLeafByUser: boolean;
            isLeaf: boolean;
            canFocus: boolean;
            level: number;
            loaded: boolean;
            childNodes: any[];
            loading: boolean;
            initialize: () => void;
            setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
            readonly label: string;
            readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
            readonly disabled: boolean;
            readonly nextSibling: any | null;
            readonly previousSibling: any | null;
            contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
            remove: () => void;
            insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
            insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
            insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
            removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
            removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
            expand: (callback?: () => void, expandParent?: boolean) => void;
            doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
            collapse: () => void;
            shouldLoadData: () => boolean;
            updateLeafState: () => void;
            setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
            getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            updateChildren: () => void;
            loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
            eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
            reInitChecked: () => void;
        }>;
        dragState: import('vue').Ref<{
            showDropIndicator: boolean;
            draggingNode: null;
            dropNode: null;
            allowDrop: boolean;
            dropType: null;
        }>;
        el$: import('vue').Ref<import('element-plus/es/utils').Nullable<HTMLElement>>;
        dropIndicator$: import('vue').Ref<import('element-plus/es/utils').Nullable<HTMLElement>>;
        isEmpty: import('vue').ComputedRef<boolean>;
        filter: (value: any) => void;
        getNodeKey: (node: import('element-plus/es/components/tree/src/model/node').default) => any;
        getNodePath: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
        getCheckedNodes: (leafOnly?: boolean, includeHalfChecked?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
        getCheckedKeys: (leafOnly?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
        getCurrentNode: () => import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
        getCurrentKey: () => any;
        setCheckedNodes: (nodes: import('element-plus/es/components/tree/src/model/node').default[], leafOnly?: boolean) => void;
        setCheckedKeys: (keys: import('element-plus/es/components/tree/src/tree.type').TreeKey[], leafOnly?: boolean) => void;
        setChecked: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData, checked: boolean, deep: boolean) => void;
        getHalfCheckedNodes: () => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
        getHalfCheckedKeys: () => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
        setCurrentNode: (node: import('element-plus/es/components/tree/src/model/node').default, shouldAutoExpandParent?: boolean) => void;
        setCurrentKey: (key?: import('element-plus/es/components/tree/src/tree.type').TreeKey, shouldAutoExpandParent?: boolean) => void;
        t: import('element-plus').Translator;
        getNode: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => import('element-plus/es/components/tree/src/model/node').default;
        remove: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
        append: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, parentNode: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/model/node').default) => void;
        insertBefore: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refNode: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
        insertAfter: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refNode: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
        handleNodeExpand: (nodeData: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default, instance: import('vue').ComponentInternalInstance) => void;
        updateKeyChildren: (key: import('element-plus/es/components/tree/src/tree.type').TreeKey, data: import('element-plus/es/components/tree/src/tree.type').TreeData) => void;
    }, unknown, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, ("current-change" | "check" | "node-expand" | "check-change" | "node-click" | "node-contextmenu" | "node-collapse" | "node-drag-start" | "node-drag-end" | "node-drop" | "node-drag-leave" | "node-drag-enter" | "node-drag-over")[], import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps, {
        data: unknown[];
        props: import('element-plus/es/components/tree/src/tree.type').TreeOptionProps;
        checkStrictly: boolean;
        lazy: boolean;
        accordion: boolean;
        draggable: boolean;
        defaultExpandAll: boolean;
        indent: number;
        renderAfterExpand: boolean;
        showCheckbox: boolean;
        expandOnClickNode: boolean;
        checkOnClickNode: boolean;
        checkDescendants: boolean;
        autoExpandParent: boolean;
        highlightCurrent: boolean;
    }, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import('vue').ExtractPropTypes<{
        data: {
            type: ArrayConstructor;
            default: () => never[];
        };
        emptyText: {
            type: StringConstructor;
        };
        renderAfterExpand: {
            type: BooleanConstructor;
            default: boolean;
        };
        nodeKey: StringConstructor;
        checkStrictly: BooleanConstructor;
        defaultExpandAll: BooleanConstructor;
        expandOnClickNode: {
            type: BooleanConstructor;
            default: boolean;
        };
        checkOnClickNode: BooleanConstructor;
        checkDescendants: {
            type: BooleanConstructor;
            default: boolean;
        };
        autoExpandParent: {
            type: BooleanConstructor;
            default: boolean;
        };
        defaultCheckedKeys: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["defaultCheckedKeys"]>;
        defaultExpandedKeys: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["defaultExpandedKeys"]>;
        currentNodeKey: import('vue').PropType<string | number>;
        renderContent: FunctionConstructor;
        showCheckbox: {
            type: BooleanConstructor;
            default: boolean;
        };
        draggable: {
            type: BooleanConstructor;
            default: boolean;
        };
        allowDrag: FunctionConstructor;
        allowDrop: FunctionConstructor;
        props: {
            type: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["props"]>;
            default: () => {
                children: string;
                label: string;
                disabled: string;
            };
        };
        lazy: {
            type: BooleanConstructor;
            default: boolean;
        };
        highlightCurrent: BooleanConstructor;
        load: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["load"]>;
        filterNodeMethod: import('vue').PropType<import('element-plus/es/components/tree/src/tree.type').TreeComponentProps["filterNodeMethod"]>;
        accordion: BooleanConstructor;
        indent: {
            type: NumberConstructor;
            default: number;
        };
        icon: {
            type: import('vue').PropType<string | import('vue').Component>;
        };
    }>> & {
        "onCurrent-change"?: ((...args: any[]) => any) | undefined;
        "onNode-expand"?: ((...args: any[]) => any) | undefined;
        onCheck?: ((...args: any[]) => any) | undefined;
        "onCheck-change"?: ((...args: any[]) => any) | undefined;
        "onNode-click"?: ((...args: any[]) => any) | undefined;
        "onNode-contextmenu"?: ((...args: any[]) => any) | undefined;
        "onNode-collapse"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-start"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-end"?: ((...args: any[]) => any) | undefined;
        "onNode-drop"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-leave"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-enter"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-over"?: ((...args: any[]) => any) | undefined;
    }, {
        ns: {
            namespace: import('vue').ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string) => string;
            m: (modifier?: string) => string;
            be: (blockSuffix?: string, element?: string) => string;
            em: (element?: string, modifier?: string) => string;
            bm: (blockSuffix?: string, modifier?: string) => string;
            bem: (blockSuffix?: string, element?: string, modifier?: string) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        };
        store: import('vue').Ref<{
            currentNode: {
                id: number;
                text: string;
                checked: boolean;
                indeterminate: boolean;
                data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
                expanded: boolean;
                parent: any;
                visible: boolean;
                isCurrent: boolean;
                store: any;
                isLeafByUser: boolean;
                isLeaf: boolean;
                canFocus: boolean;
                level: number;
                loaded: boolean;
                childNodes: any[];
                loading: boolean;
                initialize: () => void;
                setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                readonly label: string;
                readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
                readonly disabled: boolean;
                readonly nextSibling: any | null;
                readonly previousSibling: any | null;
                contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
                remove: () => void;
                insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
                insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                expand: (callback?: () => void, expandParent?: boolean) => void;
                doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                collapse: () => void;
                shouldLoadData: () => boolean;
                updateLeafState: () => void;
                setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
                updateChildren: () => void;
                loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
                reInitChecked: () => void;
            };
            currentNodeKey: import('element-plus/es/components/tree/src/tree.type').TreeKey;
            nodesMap: import('element-plus/es/components/tree/src/tree.type').TreeStoreNodesMap;
            root: {
                id: number;
                text: string;
                checked: boolean;
                indeterminate: boolean;
                data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
                expanded: boolean;
                parent: any;
                visible: boolean;
                isCurrent: boolean;
                store: any;
                isLeafByUser: boolean;
                isLeaf: boolean;
                canFocus: boolean;
                level: number;
                loaded: boolean;
                childNodes: any[];
                loading: boolean;
                initialize: () => void;
                setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                readonly label: string;
                readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
                readonly disabled: boolean;
                readonly nextSibling: any | null;
                readonly previousSibling: any | null;
                contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
                remove: () => void;
                insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
                insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
                removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
                expand: (callback?: () => void, expandParent?: boolean) => void;
                doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                collapse: () => void;
                shouldLoadData: () => boolean;
                updateLeafState: () => void;
                setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
                updateChildren: () => void;
                loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
                eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
                reInitChecked: () => void;
            };
            data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            lazy: boolean;
            load: import('element-plus/es/components/tree/src/tree.type').LoadFunction;
            filterNodeMethod: import('element-plus/es/components/tree/src/tree.type').FilterNodeMethodFunction;
            key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
            defaultCheckedKeys: import('element-plus/es/components/tree/src/tree.type').TreeKey[];
            checkStrictly: boolean;
            defaultExpandedKeys: import('element-plus/es/components/tree/src/tree.type').TreeKey[];
            autoExpandParent: boolean;
            defaultExpandAll: boolean;
            checkDescendants: boolean;
            props: {
                children?: string | undefined;
                label?: (string | ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => string)) | undefined;
                disabled?: (string | ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => boolean)) | undefined;
                isLeaf?: (string | ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => boolean)) | undefined;
                class?: ((data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default) => string | {
                    [key: string]: boolean;
                }) | undefined;
            };
            initialize: () => void;
            filter: (value: import('element-plus/es/components/tree/src/tree.type').FilterValue) => void;
            setData: (newVal: import('element-plus/es/components/tree/src/tree.type').TreeData) => void;
            getNode: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => import('element-plus/es/components/tree/src/model/node').default;
            insertBefore: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refData: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
            insertAfter: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refData: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
            remove: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
            append: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, parentData: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/model/node').default) => void;
            _initDefaultCheckedNodes: () => void;
            _initDefaultCheckedNode: (node: import('element-plus/es/components/tree/src/model/node').default) => void;
            setDefaultCheckedKey: (newVal: import('element-plus/es/components/tree/src/tree.type').TreeKey[]) => void;
            registerNode: (node: import('element-plus/es/components/tree/src/model/node').default) => void;
            deregisterNode: (node: import('element-plus/es/components/tree/src/model/node').default) => void;
            getCheckedNodes: (leafOnly?: boolean, includeHalfChecked?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            getCheckedKeys: (leafOnly?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
            getHalfCheckedNodes: () => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            getHalfCheckedKeys: () => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
            _getAllNodes: () => import('element-plus/es/components/tree/src/model/node').default[];
            updateChildren: (key: import('element-plus/es/components/tree/src/tree.type').TreeKey, data: import('element-plus/es/components/tree/src/tree.type').TreeData) => void;
            _setCheckedKeys: (key: import('element-plus/es/components/tree/src/tree.type').TreeKey, leafOnly: boolean | undefined, checkedKeys: {
                [key: string]: boolean;
            }) => void;
            setCheckedNodes: (array: import('element-plus/es/components/tree/src/model/node').default[], leafOnly?: boolean) => void;
            setCheckedKeys: (keys: import('element-plus/es/components/tree/src/tree.type').TreeKey[], leafOnly?: boolean) => void;
            setDefaultExpandedKeys: (keys: import('element-plus/es/components/tree/src/tree.type').TreeKey[]) => void;
            setChecked: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData, checked: boolean, deep: boolean) => void;
            getCurrentNode: () => import('element-plus/es/components/tree/src/model/node').default;
            setCurrentNode: (currentNode: import('element-plus/es/components/tree/src/model/node').default) => void;
            setUserCurrentNode: (node: import('element-plus/es/components/tree/src/model/node').default, shouldAutoExpandParent?: boolean) => void;
            setCurrentNodeKey: (key?: import('element-plus/es/components/tree/src/tree.type').TreeKey, shouldAutoExpandParent?: boolean) => void;
        }>;
        root: import('vue').Ref<{
            id: number;
            text: string;
            checked: boolean;
            indeterminate: boolean;
            data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
            expanded: boolean;
            parent: any;
            visible: boolean;
            isCurrent: boolean;
            store: any;
            isLeafByUser: boolean;
            isLeaf: boolean;
            canFocus: boolean;
            level: number;
            loaded: boolean;
            childNodes: any[];
            loading: boolean;
            initialize: () => void;
            setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
            readonly label: string;
            readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
            readonly disabled: boolean;
            readonly nextSibling: any | null;
            readonly previousSibling: any | null;
            contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
            remove: () => void;
            insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
            insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
            insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
            removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
            removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
            expand: (callback?: () => void, expandParent?: boolean) => void;
            doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
            collapse: () => void;
            shouldLoadData: () => boolean;
            updateLeafState: () => void;
            setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
            getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            updateChildren: () => void;
            loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
            eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
            reInitChecked: () => void;
        }>;
        currentNode: import('vue').Ref<{
            id: number;
            text: string;
            checked: boolean;
            indeterminate: boolean;
            data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
            expanded: boolean;
            parent: any;
            visible: boolean;
            isCurrent: boolean;
            store: any;
            isLeafByUser: boolean;
            isLeaf: boolean;
            canFocus: boolean;
            level: number;
            loaded: boolean;
            childNodes: any[];
            loading: boolean;
            initialize: () => void;
            setData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
            readonly label: string;
            readonly key: import('element-plus/es/components/tree/src/tree.type').TreeKey;
            readonly disabled: boolean;
            readonly nextSibling: any | null;
            readonly previousSibling: any | null;
            contains: (target: import('element-plus/es/components/tree/src/model/node').default, deep?: boolean) => boolean;
            remove: () => void;
            insertChild: (child?: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, index?: number, batch?: boolean) => void;
            insertBefore: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
            insertAfter: (child: import('element-plus/es/components/tree/src/tree.type').FakeNode | import('element-plus/es/components/tree/src/model/node').default, ref: import('element-plus/es/components/tree/src/model/node').default) => void;
            removeChild: (child: import('element-plus/es/components/tree/src/model/node').default) => void;
            removeChildByData: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => void;
            expand: (callback?: () => void, expandParent?: boolean) => void;
            doCreateChildren: (array: import('element-plus/es/components/tree/src/tree.type').TreeNodeData[], defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
            collapse: () => void;
            shouldLoadData: () => boolean;
            updateLeafState: () => void;
            setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
            getChildren: (forceInit?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
            updateChildren: () => void;
            loadData: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void, defaultProps?: import('element-plus/es/components/tree/src/tree.type').TreeNodeLoadedDefaultProps) => void;
            eachNode: (callback: (node: import('element-plus/es/components/tree/src/model/node').default) => void) => void;
            reInitChecked: () => void;
        }>;
        dragState: import('vue').Ref<{
            showDropIndicator: boolean;
            draggingNode: null;
            dropNode: null;
            allowDrop: boolean;
            dropType: null;
        }>;
        el$: import('vue').Ref<import('element-plus/es/utils').Nullable<HTMLElement>>;
        dropIndicator$: import('vue').Ref<import('element-plus/es/utils').Nullable<HTMLElement>>;
        isEmpty: import('vue').ComputedRef<boolean>;
        filter: (value: any) => void;
        getNodeKey: (node: import('element-plus/es/components/tree/src/model/node').default) => any;
        getNodePath: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
        getCheckedNodes: (leafOnly?: boolean, includeHalfChecked?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
        getCheckedKeys: (leafOnly?: boolean) => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
        getCurrentNode: () => import('element-plus/es/components/tree/src/tree.type').TreeNodeData;
        getCurrentKey: () => any;
        setCheckedNodes: (nodes: import('element-plus/es/components/tree/src/model/node').default[], leafOnly?: boolean) => void;
        setCheckedKeys: (keys: import('element-plus/es/components/tree/src/tree.type').TreeKey[], leafOnly?: boolean) => void;
        setChecked: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData, checked: boolean, deep: boolean) => void;
        getHalfCheckedNodes: () => import('element-plus/es/components/tree/src/tree.type').TreeNodeData[];
        getHalfCheckedKeys: () => import('element-plus/es/components/tree/src/tree.type').TreeKey[];
        setCurrentNode: (node: import('element-plus/es/components/tree/src/model/node').default, shouldAutoExpandParent?: boolean) => void;
        setCurrentKey: (key?: import('element-plus/es/components/tree/src/tree.type').TreeKey, shouldAutoExpandParent?: boolean) => void;
        t: import('element-plus').Translator;
        getNode: (data: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData) => import('element-plus/es/components/tree/src/model/node').default;
        remove: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
        append: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, parentNode: import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/model/node').default) => void;
        insertBefore: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refNode: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
        insertAfter: (data: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, refNode: import('element-plus/es/components/tree/src/tree.type').TreeKey | import('element-plus/es/components/tree/src/tree.type').TreeNodeData | import('element-plus/es/components/tree/src/model/node').default) => void;
        handleNodeExpand: (nodeData: import('element-plus/es/components/tree/src/tree.type').TreeNodeData, node: import('element-plus/es/components/tree/src/model/node').default, instance: import('vue').ComponentInternalInstance) => void;
        updateKeyChildren: (key: import('element-plus/es/components/tree/src/tree.type').TreeKey, data: import('element-plus/es/components/tree/src/tree.type').TreeData) => void;
    }, {}, {}, {}, {
        data: unknown[];
        props: import('element-plus/es/components/tree/src/tree.type').TreeOptionProps;
        checkStrictly: boolean;
        lazy: boolean;
        accordion: boolean;
        draggable: boolean;
        defaultExpandAll: boolean;
        indent: number;
        renderAfterExpand: boolean;
        showCheckbox: boolean;
        expandOnClickNode: boolean;
        checkOnClickNode: boolean;
        checkDescendants: boolean;
        autoExpandParent: boolean;
        highlightCurrent: boolean;
    }> | undefined>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    change: (value: any) => any;
}, string, import('vue').PublicProps, Readonly<TreeFilterProps> & Readonly<{
    onChange?: ((value: any) => any) | undefined;
}>, {
    id: string;
    label: string;
    multiple: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
